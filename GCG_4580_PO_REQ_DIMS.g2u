Program.Sub.Preflight.Start

Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.SetErrorHandler("Main_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)
V.Local.sSql.Declare(String)
V.Local.sQty.Declare(String)
V.Local.iRet.Declare(Long)
V.Local.fTQty.Declare(Float,-1)
V.Local.lLength.Declare(Long)
V.Local.lWidth.Declare(Long)
V.Local.lSlabs.Declare(Long)
V.Local.sPOReqLine.Declare(String)
v.Local.sPartRev.Declare(String)
v.Local.bIntChk.Declare(Boolean)
v.Local.iSlabQty.Declare(Float)

F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)
F.Intrinsic.Control.SelectCase(V.Caller.Hook)
	'populate hook
	F.Intrinsic.Control.Case(16190)
		'moving and making hidden field visible on PO Req screen
		F.Intrinsic.Variable.SetProperty("GAB-LBL-1","PL",770)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-1","PT",293)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-1","PW",40)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-1","PH",14)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-LBL-1,"HIDE",0)
		v.Passed.GAB-LBL-1.Set("#Slabs")
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-3","PL",770)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-3","PT",309)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-3","PW",50)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-3,"HIDE",0)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-3,"LOCK",0)

		F.Intrinsic.Variable.SetProperty("GAB-LBL-2","PL",830)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-2","PT",293)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-2","PW",40)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-2","PH",14)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-LBL-2,"HIDE",0)
		v.Passed.GAB-LBL-2.Set("Length")
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-2","PL",830)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-2","PT",309)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-2","PW",50)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-2,"HIDE",0)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-2,"LOCK",0)

		F.Intrinsic.Variable.SetProperty("GAB-LBL-3","PL",890)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-3","PT",293)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-3","PW",40)
		F.Intrinsic.Variable.SetProperty("GAB-LBL-3","PH",14)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-LBL-3,"HIDE",0)
		v.Passed.GAB-LBL-3.Set("Width")
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-1","PL",890)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-1","PT",309)
		F.Intrinsic.Variable.SetProperty("GAB-TEXT-1","PW",50)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-1,"HIDE",0)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-TEXT-1,"LOCK",0)
		
		F.Intrinsic.Variable.SetProperty("GAB-BTN-1","PL",945)
		F.Intrinsic.Variable.SetProperty("GAB-BTN-1","PT",307)
		F.Intrinsic.Variable.SetProperty("GAB-BTN-1","PW",30)
		F.Intrinsic.Variable.SetProperty("GAB-BTN-1","PH",20)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-1,"HIDE",0)
		F.Intrinsic.UI.ChangeCallerProperty(V.Passed.GAB-BTN-1,"LOCK",0)
		V.Passed.GAB-BTN-1.Set("f(x)")

	'this is will be for the line change hook 
	F.Intrinsic.Control.Case(16246)
		F.Intrinsic.String.LPad(V.Passed.000001,0,3,V.Local.sPOReqLine)
		F.Intrinsic.String.Build("Select * From GCG_4580_PO_REQ_DIMS Where PO_REQ = '{0}' and PO_REQ_Line = '{1}'",V.Passed.000003,V.Local.sPOReqLine,V.Local.sSql)
		F.Data.DataTable.CreateFromSQL("POREQ","con",V.Local.sSql,True)
		F.Intrinsic.Control.If(V.DataTable.POReq.RowCount--,<>,-1)
			V.Passed.GAB-TEXT-3.Set(V.DataTable.POReq(V.DataTable.POReq.RowCount--).Slabs!FieldVal)
			V.Passed.GAB-Text-2.Set(V.DataTable.POReq(V.DataTable.POReq.RowCount--).Length!FieldVal)
			V.Passed.GAB-TEXT-1.Set(V.DataTable.POReq(V.DataTable.POReq.RowCount--).Width!FieldVal)
		F.Intrinsic.Control.EndIf	

	'pre-save line hook
	F.Intrinsic.Control.Case(16242)	
		'build part+rev from passed vars
		v.Local.sPartRev.Set(v.Passed.000013)
		f.Intrinsic.String.RPad(v.Passed.000013," ",17,v.Local.sPartRev)
		f.Intrinsic.String.Build("{0}{1}",v.Local.sPartRev,v.Passed.000014,v.Local.sPartRev)

		'checking inventory-mst3 table to see if use_dimension_calc is set to true if so don't save until slab,length and width is filled out.
		F.Intrinsic.String.Build("Select Use_Dimension_Calc From V_Inventory_Mst3 Where Part = '{0}' and Location = '{1}' and Use_Dimension_Calc = 1",v.Local.sPartRev.Trim,V.Passed.000016,V.Local.sSql)
		F.Data.DataTable.CreateFromSQL("DIM","con",V.Local.sSql,True)

		F.Intrinsic.Control.If(V.DataTable.DIM.RowCount--,<>,-1)
			F.Intrinsic.Control.If(V.Passed.GAB-TEXT-3,=,"","OR",V.Passed.GAB-TEXT-2,=,"",V.Passed.GAB-TEXT-1,=,"")
				F.Intrinsic.UI.Msgbox("The Following needs to be filled in before the Line can be saved: #Slabs,Length,Width","Warning")
				V.Passed.777777.Set(1)
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf

	'post save line hook
	F.Intrinsic.Control.Case(16244)
		'build part+rev from passed vars
		v.Local.sPartRev.Set(v.Passed.000013)
		f.Intrinsic.String.RPad(v.Passed.000013," ",17,v.Local.sPartRev)
		f.Intrinsic.String.Build("{0}{1}",v.Local.sPartRev,v.Passed.000014,v.Local.sPartRev)


		F.Intrinsic.String.LPad(V.Passed.000001,0,3,V.Local.sPOReqLine)
		F.Intrinsic.String.Build("Select * From GCG_4580_PO_REQ_DIMS Where PO_REQ = '{0}' and PO_REQ_Line = '{1}'",V.Passed.000003,V.Local.sPOReqLine,V.Local.sSql)
		F.Data.DataTable.CreateFromSQL("POREQ","con",V.Local.sSql,True)

		'checking if record exists already and adding row if doesn't exists
		F.Intrinsic.Control.If(V.DataTable.POReq.RowCount--,=,-1)
			'get per slab qty based on LxW of slab.
			f.Intrinsic.Math.Mult(v.Passed.GAB-TEXT-2.Long,v.Passed.GAB-TEXT-1.Long,v.Local.iSlabQty)
			v.Local.sQty.Set(v.Local.iSlabQty.String)		

			F.Data.DataTable.AddRow("POReq","PO_REQ",V.Passed.000003,"PO_REQ_LINE",V.Local.sPOReqLine,"PART",v.Local.sPartRev.Trim,"LOCATION",V.Passed.000016,"SLABS",V.Passed.GAB-TEXT-3,"LENGTH",V.Passed.GAB-TEXT-2,"WIDTH",V.Passed.GAB-TEXT-1,"Quantity",V.Local.sQty,"TOTAL_QTY_LINE",V.Passed.000048)
		'setting values if record already exists
		F.Intrinsic.Control.Else

			'get per slab qty based on LxW of slab.
			f.Intrinsic.Math.Mult(v.Passed.GAB-TEXT-2.Long,v.Passed.GAB-TEXT-1.Long,v.Local.iSlabQty)
			v.Local.sQty.Set(v.Local.iSlabQty.String)


			F.Data.DataTable.SetValue("POReq",V.DataTable.POReq.RowCount--,"PO_REQ",V.Passed.000003,"PO_REQ_LINE",V.Local.sPOReqLine,"PART",v.Local.sPartRev.Trim,"LOCATION",V.Passed.000016,"SLABS",V.Passed.GAB-TEXT-3,"LENGTH",V.Passed.GAB-TEXT-2,"WIDTH",V.Passed.GAB-TEXT-1,"Quantity",V.Local.sQty,"TOTAL_QTY_LINE",V.Passed.000048)
		F.Intrinsic.Control.EndIf

		'saving record
		F.Data.DataTable.SaveToDB("POReq","con","GCG_4580_PO_REQ_DIMS","PO_REQ*!*PO_REQ_LINE",7,"PO_REQ@!@PO_REQ*!*PO_REQ_LINE@!@PO_REQ_LINE*!*PART@!@PART*!*LOCATION@!@LOCATION*!*SLABS@!@SLABS*!*LENGTH@!@LENGTH*!*WIDTH@!@WIDTH*!*QUANTITY@!@QUANTITY*!*TOTAL_QTY_LINE@!@TOTAL_QTY_LINE")

		V.Passed.GAB-TEXT-3.Set("")
		V.Passed.GAB-Text-2.Set("")
		V.Passed.GAB-TEXT-1.Set("")	

	'GAB-BTN-1 hook
	F.Intrinsic.Control.Case(51489)	

		F.Intrinsic.Control.If(V.Passed.GAB-TEXT-3,<>,"")
			V.Local.lSlabs.Set(V.Passed.GAB-TEXT-3)
		F.Intrinsic.Control.Else
			V.Local.lSlabs.Set(0)
		F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.If(V.Passed.GAB-TEXT-2,<>,"")
			V.Local.lLength.Set(V.Passed.GAB-TEXT-2)
		F.Intrinsic.Control.Else
			V.Local.lLength.Set(0)
		F.Intrinsic.Control.EndIf

		F.Intrinsic.Control.If(V.Passed.GAB-TEXT-1,<>,"")
			V.Local.lWidth.Set(V.Passed.GAB-TEXT-1)
		F.Intrinsic.Control.Else
			V.Local.lWidth.Set(0)
		F.Intrinsic.Control.EndIf

		F.Intrinsic.Math.Evaluate("[V.Local.lSlabs]*([V.Local.lLength]*[V.Local.lWidth])",V.Local.fTQty)
		V.Passed.000048.Set(V.Local.fTQty)

F.Intrinsic.Control.EndSelect

F.Intrinsic.Control.CallSub(exit)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Main_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4580_PO_REQ_DIMS.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.Main.End

Program.Sub.Exit.Start
F.Intrinsic.Control.SetErrorHandler("Exit_Err")
F.Intrinsic.Control.ClearErrors

V.Local.sError.Declare(String)

'closing datatables
F.Intrinsic.Control.If(V.DataTable.POReq.Exists,=,True)
	F.Data.DataTable.Close("POReq")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.DIM.Exists,=,True)
	F.Data.DataTable.Close("DIM")
F.Intrinsic.Control.EndIf

'closing connection
F.ODBC.Connection!con.Close
'ending program
F.Intrinsic.Control.End

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Label("Exit_Err")
F.Intrinsic.Control.If(V.Ambient.ErrorNumber,<>,0)
	Function.Intrinsic.String.Concat("Project: GCG_4580_PO_REQ_DIMS.g2u",V.Ambient.Newline,V.Ambient.Newline,"Subroutine: ",V.Ambient.CurrentSubroutine,V.Ambient.NewLine,"Error Occurred ",V.Ambient.ErrorNumber," with description ",V.Ambient.ErrorDescription,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
Function.Intrinsic.Control.EndIf


Program.Sub.Exit.End

Program.Sub.Comments.Start
${$0$}$$}$RLK$}$5/16/2017 3:28:00 PM$}$False
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$Loads BDF and for every part, it queries for real inventory part based on description and swaps part out in BDF.


Program.Sub.Comments.End